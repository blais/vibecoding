#!/usr/bin/env python3

"""
Analyzes the joblib cache for PDF embeddings generated by
pdf-similarity-filer-feature-preparation.py.

This script finds all pickle (.pkl) files in the embedding cache directory,
loads their contents, and calculates the fraction of cache entries that
contain an empty embedding list (indicating a potential processing error
or an empty document during the original feature preparation).
"""

import os
import tempfile
import joblib
import logging
import pickle
import sys

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(levelname)s: %(message)s", stream=sys.stderr
)

# Define the base cache directory structure used by the feature preparation script
BASE_CACHE_DIR = os.path.join(tempfile.gettempdir(), "pdf_similarity_filer")
EMBEDDING_CACHE_DIR = os.path.join(BASE_CACHE_DIR, "embedding_cache")


def analyze_embedding_cache(cache_dir: str):
    """
    Analyzes the embedding cache to find the fraction of empty embeddings.

    Args:
        cache_dir: The path to the joblib embedding cache directory.
    """
    if not os.path.isdir(cache_dir):
        logging.error(f"Cache directory not found: {cache_dir}")
        sys.exit(1)

    logging.info(f"Analyzing cache directory: {cache_dir}")

    pickle_files = []
    # Walk through the cache directory structure
    # Joblib creates nested directories like: .../func_name/hash/output.pkl
    for root, _, files in os.walk(cache_dir):
        for filename in files:
            if filename.lower() == "output.pkl":
                pickle_files.append(os.path.join(root, filename))

    total_files = len(pickle_files)
    empty_embeddings_count = 0

    if total_files == 0:
        logging.warning("No 'output.pkl' files found in the cache directory.")
        print("Total cache files found: 0")
        print("Files with empty embeddings: 0")
        print("Fraction of empty embeddings: N/A")
        return

    logging.info(f"Found {total_files} 'output.pkl' cache files.")

    for file_path in pickle_files:
        try:
            # Load the cached data using joblib.load
            cached_data = joblib.load(file_path)

            # Check if the cached data is an empty list
            # Based on generate_embedding_cached, the result is List[float]
            if isinstance(cached_data, list) and not cached_data:
                empty_embeddings_count += 1
                logging.debug(f"Found empty embedding in: {file_path}")

        except (pickle.UnpicklingError, EOFError, ValueError, TypeError) as e:
            logging.warning(f"Could not load or parse cache file {file_path}: {e}")
        except Exception as e:
            logging.error(f"Unexpected error processing file {file_path}: {e}")

    # Calculate the fraction
    if total_files > 0:
        fraction_empty = empty_embeddings_count / total_files
    else:
        fraction_empty = 0.0  # Avoid division by zero

    # Print the results to stdout
    print(f"Total 'output.pkl' files found: {total_files}")
    print(f"Files with empty embeddings: {empty_embeddings_count}")
    print(f"Fraction of empty embeddings: {fraction_empty:3.1%}")


def main():
    """Main function to run the cache analysis."""
    analyze_embedding_cache(EMBEDDING_CACHE_DIR)


if __name__ == "__main__":
    main()
